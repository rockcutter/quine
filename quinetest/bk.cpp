#include <iostream>
#include <string>
#include <string_view>
#include <regex>

using namespace std::string_literals;

std::string encoded = R"(
#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$SPACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){return$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPACESPACE_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SPACE"SPACE";$SPACEstatic$SPACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SPACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWLINE";static$SPACEconst$SPACEstd::string$SPACESPACE_CHARACTER$SPACE=$SPACE"$SPACE";static$SPACEconst$SPACEstd::string$SPACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_CHARACTERS$SPACE=$SPACE"\n";$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(SPACE_TOKEN),$SPACESPACE_CHARACTER);str$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACEstd::string$SPACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$SPACEsize_t$SPACEindex$SPACE=$SPACE0){auto$SPACEformatPoint$SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){formatPoint$SPACE=$SPACEcontent.find("{}",$SPACEformatPoint$SPACE+$SPACE1);}auto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint);auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$SPACE2);return$SPACEstd::string{former}$SPACE+$SPACEarg$SPACE+$SPACEstd::string{latter};}int$SPACEmain(){auto$SPACEdecoded$SPACE=$SPACERestoreString(RemoveSpace(RemoveNewLine(encoded)));std::string$SPACEoutString;outString$SPACE=$SPACEMiniFormat(decoded,$SPACE"R\"(");outString$SPACE=$SPACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE)";
std::string RemoveSpace(const std::string& str){return std::regex_replace(str, std::regex(" "), "");} std::string RemoveNewLine(const std::string& str){return std::regex_replace(str, std::regex("\n"), "");}std::string RestoreString(std::string str){static const std::string SPACE_TOKEN = "\\$"s + "SPACE"; static const std::string TAB_TOKEN = "\\$"s + "TAB"; static const std::string NEWLINE_TOKEN = "\\$"s + "NEWLINE";static const std::string SPACE_CHARACTER = " ";static const std::string TAB_CHARACTERS = "    "; static const std::string NEWLINE_CHARACTERS = "\n"; str = std::regex_replace(str, std::regex(SPACE_TOKEN), SPACE_CHARACTER);str = std::regex_replace(str, std::regex(TAB_TOKEN), TAB_CHARACTERS); str = std::regex_replace(str, std::regex(NEWLINE_TOKEN), NEWLINE_CHARACTERS);return str;} std::string MiniFormat(std::string_view content, std::string arg, size_t index = 0){auto formatPoint = content.find("{}");for(size_t i = 0; i < index; ++i){formatPoint = content.find("{}", formatPoint + 1);}auto former = content.substr(0, formatPoint);auto latter = content.substr(formatPoint + 2);return std::string{former} + arg + std::string{latter};}int main(){auto decoded = RestoreString(RemoveSpace(RemoveNewLine(encoded)));std::string outString;outString = MiniFormat(decoded, "R\"(");outString = MiniFormat(outString, ")\"", 1);outString = MiniFormat(outString, encoded);std::cout << outString;}
