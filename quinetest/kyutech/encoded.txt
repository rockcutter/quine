#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$SPACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEreturn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPACESPACE_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SPACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SPACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWLINE";static$SPACEconst$SPACEstd::string$SPACESPACE_CHARACTER$SPACE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SPACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_CHARACTERS$SPACE=$SPACE"\n";$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$SPACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$SPACEsize_t$SPACEindex$SPACE=$SPACE0){auto$SPACEformatPoint$SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPACE=$SPACEcontent.find("{}",$SPACEformatPoint$SPACE+$SPACE1);}auto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint);auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEarg$SPACE+$SPACEstd::string{latter};}int$SPACEmain(){auto$SPACEdecoded$SPACE=$SPACERestoreString(RemoveSpace(RemoveNewLine(encoded)));std::string$SPACEoutString;outString$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\"(");outString$SPACE=$SPACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE
