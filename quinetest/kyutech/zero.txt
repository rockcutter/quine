#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE#include$SPACE<iostream>$NEWLINE#include$SPACE<string>$NEWLINE#include$SPACE<string_view>$NEWLINE#include$SPACE<regex>$NEWLINE$NEWLINEusing$SPACEnamespace$S PACEstd::string_literals;$NEWLINE$NEWLINEstd::string$SPACEencoded$SPACE=$SPACE{}{}{};$NEWLINEstd::string$SPACERemoveSpace(const$SPACEstd::string&$SPACEstr){ return$SPACEstd::regex_replace(str,$SPACEstd::regex("$SPACE"),$SPACE"");}$SPACEstd::string$SPACERemoveNewLine(const$SPACEstd::string&$SPACEstr){$NEWLINEretu rn$SPACEstd::regex_replace(str,$SPACEstd::regex("\n"),$SPACE"");}std::string$SPACERestoreString(std::string$SPACEstr){static$SPACEconst$SPACEstd::string$SPA CESPA CE_TOKEN$S PACE=$SPACE"\\$" s$SPACE+$SPACE"SPACE";$SPACE$NEWLINEstatic$SP ACEconst$SPACEstd::string$SPACETAB_TOKEN$SPACE=$SPACE"\\$"s$SPACE+$SP ACE"TAB";$SPACEstatic$SPACEconst$SPACEstd::string$SPACENEWLINE_TOKEN $SPACE=$SPACE"\\$"s$SPACE+$SPACE"NEWL INE";static$SPACEconst $SPACEstd::string$SPACESPACE_CHARACTER$SPA CE=$SPACE"$SPACE";$NEWLINEstatic$SPACEconst$SPACEstd::string$SP ACETAB_CHARACTERS$SPACE=$SPACE"$TAB";$SPACEstatic$SPACEconst$SPACE std::string$SPACENEWLIN E_CHARACTERS$SPACE=$SPACE "\n";$SPACEstr$SPACE=$SPA CEstd::regex_replace(str,$SPACEstd::reg ex(SPACE_TOKEN),$SPACESPACE_CHARACTER);$NEWLINEstr$SPACE=$SPACEstd::regex _replace(str,$SPACEstd::regex(TAB_TOKEN),$SPACETAB_ CHARACTERS);$SPACEstr$SPACE=$SPACEstd::regex_replace(str,$SPACEstd::regex(NEWLINE_TOKEN ),$SPACENEWLINE_CHARACTERS);return$SPACEstr;}$SPACE$NEWLINEstd::string$S PACEMiniFormat(std::string_view$SPACEcontent,$SPACEstd::string$SPACEarg,$ SPACEsize_t$SPACEin dex$SPACE=$SPACE0) {auto$SPACEformatPoint $SPACE=$SPACEcontent.find("{}");for(size_t$SPACEi$SPACE=$SPACE 0;$SPACEi$SPACE<$SPACEindex;$SPACE++i){$NEWLINEformatPoint$SPAC E=$SPACEcontent.find("{}",$SPACEformatPo int$SPACE+$SPACE1);}a uto$SPACEformer$SPACE=$SPACEcontent.substr(0,$SPACEformatPoint );auto$SPACElatter$SPACE=$SPACEcontent.substr(formatPoint$SPACE+$ SPACE2);return$SPACEstd::string$NEWLINE{former}$SPACE+$SPACEar g$SPACE+$SPACEstd ::string{latter};}in t$SPACEmain(){auto$SPACE decoded$SPACE=$SPACERestoreString(RemoveSpace(Re moveNewLine(encoded)));std::string$SPACEoutString;outSt ring$SPACE=$SPACEMiniFormat($NEWLINEdecoded,$SPACE"R\ "(");outString$SPACE=$SP ACEMiniFormat(outString,$SPACE")\"",$SPACE1);outString$SPACE=$SPACEMiniFormat(outString,$SPACEencoded);std::cout$SPACE<<$SPACEoutString;}$NEWLINE
